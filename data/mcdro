#!/bin/bash

# reformat raw mega cd retroarch or md.emu input file to opposite
# easier to go to md.emu, manipulate codes, then return to retroarch
if [[ -n "${@:1}" && -f "${@:1}" ]]; then
  tmpfile=$(mktemp)
  exec {FD_W}>"$tmpfile"
  exec {FD_R}<"$tmpfile"
  rm "$tmpfile"
  # create temp file
  file="$(echo "$(realpath "${@:1}")" | perl -pe 's/((|_md|_retro)\.(cht|pat))//gi')"
  # strip _md.pat, _retro.cht, and .cht extension to get root filename
  if [[ -n "$(pcre2grep -Mio 'cheat\d+_desc.*(?s)\s+(?-s)cheat\d+_code.+?[[:xdigit:]]{6}:[[:xdigit:]]{4}' "${@:1}")" ]] ; then
  # when file contains cheat desc and hex (6:4) format codes convert to md
    file=""$file"_md.pat"
    echo -e "\n ** RetroArch '.cht' file detected, converting to md.emu format. **\n    Processing ... \n"
    # append _md to root filename for output
    readarray -t hdng < <(grep -Pio '(?<=_desc = )\".*\"' "${@:1}" | perl -pe 's#(?<=\")[ ]+|[ ]+(?=\")##gi ; s|^\"\"$| |gi ; s|\"||gi')
    # capture heading names, strip leading/trailing spaces
    # replace empty name with space, strip quotes
    readarray -t code < <(grep -Pio '(?<=_code = )\".*\"' "${@:1}" | perl -pe 's#(?<=\")[ ]+|[ ]+(?=\")##gi ; s|^\"\"$| |gi ; s|^((?![[:xdigit:]]{6}:[[:xdigit:]]{4}).)*$| |gi ; s|\"||gi ; s|O|0|gi')
    # capture code lines, strip leading/trailing spaces, replace empty code
    # with space, replace invalid code with space, strip quotes, 
    # replace capital O with zero
    ctr=0
    until [ $ctr = ${#hdng[@]} ] ; do
    # loop for the total number of headers
      if [[ "${code[$ctr]}" != ' ' ]]; then
        echo -e "$(echo "${code[$ctr]} ${hdng[$ctr]}" | perl -pe "s|\+| ${hdng[$ctr]}\n|gi")" >&$FD_W
        # write code space heading, split multi-line with duplicate heading, to temp file
      fi
      ((ctr++))
    done
    # write temp file to disk
    cat <&$FD_R > "$file"
    echo -e "  Complete, output file is:   \n  $file\n"
  elif [[ -n "$(pcre2grep -Mio '[[:xdigit:]]{6}:[[:xdigit:]]{4}\s+\w+' "${@:1}")" ]] ; then
  # when file contains (6:4) format codes followed by heading, convert to retroarch
    file=""$file"_retro.cht"
    # append _retro to root filename for output
    echo -e "\n ** md.emu '.pat' file detected, converting to RetroArch format. **\n    Processing ... \n"
    readarray -t hdng < <(grep -Pio '(?<=^[[:xdigit:]]{6}:[[:xdigit:]]{4}\s).*' "${@:1}" | perl -pe 's#^[ ]+|[ ]+$##gi')
    # capture heading that follows (6:4) format codes, strip leading/trailing spaces
    readarray -t code < <(grep -Pio '^[[:xdigit:]]{6}:[[:xdigit:]]{4}' "${@:1}")
    # capture (6:4) format codes
    ctr=0
    echo -e "cheats = ${#hdng[@]}\n" >&$FD_W
    # write cheats number heading to temp file
    until [ $ctr = ${#hdng[@]} ] ; do
      echo "cheat"$ctr"_desc = \"${hdng[$ctr]}\"" >&$FD_W
      # write cheat heading to temp file
      echo "cheat"$ctr"_code = \"${code[$ctr]}\"" >&$FD_W
      # write single line cheat code to temp file
      echo -e "cheat"$ctr"_enable = false\n" >&$FD_W
      # write code enable status to temp file
      ((ctr++))
    done
    cat <&$FD_R > "$file"
    echo -e "  Complete, output file is:   \n  $file\n"
  fi
else
  echo -e "\n ** md.emu '.pat' or RetroArch '.cht' file required. **\n ** Script will convert back and forth. **\n"
fi
