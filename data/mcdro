#!/bin/bash

# reformat raw mega cd retroarch or md.emu input file to opposite
# easier to go to md.emu, manipulate codes, then return to retroarch
# game genie codes not hex, capital letters and numbers
if [[ -n "${@:1}" && -f "${@:1}" ]]; then
  tmpfile=$(mktemp)
  exec {FD_W}>"$tmpfile"
  exec {FD_R}<"$tmpfile"
  rm "$tmpfile"
  # create temp file
  file="$(echo "$(realpath "${@:1}")" | perl -pe 's/((|_md|_retro)\.(cht|pat))//gi')"
  # strip _md.pat, _retro.cht, and .cht extension to get root filename
  if [[ -n "$(pcre2grep -Mo 'cheat\d+_desc.*(?s)\s+(?-s)cheat\d+_code.+?([[:xdigit:]?X:]{10,11}|[[:upper:]\d]{4}-[[:upper:]\d]{4})' "${@:1}")" ]] ; then
  # when file contains cheat desc and hex (6:4/4-4) format codes convert to md
    file=""$file"_md.pat"
    echo -e "\n ** RetroArch '.cht' file detected, converting to md.emu format. **\n    Processing ... \n"
    # append _md to root filename for output
    readarray -t hdng < <(pcre2grep -o '(?<=_desc = )\".*\"' "${@:1}" | perl -pe 's|'\''||g ; s#(?<=\")[\t ]+|[\t ]+(?=\")##g ; s|^\"\"$| |g ; s|\"||g')
    # capture heading names, strip leading/trailing spaces
    # replace empty name with space, strip quotes
    readarray -t code < <(pcre2grep -o '(?<=_code = )\".*\"' "${@:1}" | perl -pe 's#(?<=\")[\t ]+|[\t ]+(?=\")##g ; s|^\"\"$| |g ; s#^((?!([[:xdigit:]?X:]{10,11}|[[:upper:]\d]{4}-[[:upper:]\d]{4})).)*$# #g ; s|\"||g ; s|O|0|g')
    # capture code lines, strip leading/trailing spaces, replace empty code
    # with space, replace invalid code with space, strip quotes
    # replace capital O with zero
    ctr=0
    until [ $ctr = ${#hdng[@]} ] ; do
    # loop for the total number of headers
      if [[ "${code[$ctr]}" != ' ' ]]; then
        echo -e "$(echo "${code[$ctr]}\t${hdng[$ctr]}" | perl -pe "s'\+'\t${hdng[$ctr]}\n'g")" >&$FD_W
        # write code space heading, split multi-line with duplicate heading, to temp file
      fi
      ((ctr++))
    done
    # write temp file to disk
    cat <&$FD_R > "$file"
    echo -e "  Complete, output file is:   \n  $file\n"
  elif [[ -n "$(pcre2grep -o '([[:xdigit:]?X:]{10,11}|[[:upper:]\d]{4}-[[:upper:]\d]{4})\s+\w+' "${@:1}")" ]] ; then
  # when file contains (6:4/4-4) format codes followed by heading, convert to retroarch
    file=""$file"_retro.cht"
    # append _retro to root filename for output
    echo -e "\n ** md.emu '.pat' file detected, converting to RetroArch format. **\n    Processing ... \n"
    readarray -t hdng < <(pcre2grep -o '(?<=^[[:xdigit:]?X:]{10}\s|[[:upper:]\d]{4}-[[:upper:]\d]{4}\s)[^\r\n]+' "${@:1}" | perl -pe 's#^[\t ]+|[\t ]+$##g ; s|^$| |g')
    # capture heading that follows (6:4/4-4) format codes, strip
    # leading/trailing spaces, replace empty name with space
    readarray -t code < <(pcre2grep -o '^([[:xdigit:]?X:]{10,11}|[[:upper:]\d]{4}-[[:upper:]\d]{4})' "${@:1}")
    # capture (6:4/4-4) format codes
    ctr=0
    xctr=0
    echo -e "cheats = ${#hdng[@]}\n" >&$FD_W
    # write cheats number heading to temp file
    until [ $ctr = ${#hdng[@]} ] ; do
      if [[ -z "$xflg" ]] ; then
        xcde="${code[$ctr]}"
      else
        xcde="$xcde+${code[$ctr]}"
      fi
      # concatenate codes with consecutive, duplicate, code names
      if [[ $(($ctr+1)) -gt ${#hdng[@]} ]] ; then
        unset xflg
      elif [[ "${hdng[$ctr]}" != "${hdng[$(($ctr+1))]}" ]] ; then
        unset xflg
      elif [[ $(echo -e "${code[$ctr]}\n${code[$(($ctr+1))]}" | pcre2grep -i '[[:xdigit:]?X:]{10,11}' | wc -l) -eq 2 || $(echo -e "${code[$ctr]}\n${code[$(($ctr+1))]}" | pcre2grep -i '[[:upper:]\d]{4}-[[:upper:]\d]{4}' | wc -l) -eq 2 ]] ; then
      # verify consecutive code names have codes that are of the same type
      # be aware that codes of same type with same name will be concatenated
      # even when they shouldn't be
        xflg=1
      else
        unset xflg
      fi
      # flag consecutive, duplicate, code names for concatenation
      if [[ -z "$xflg" ]] ; then
        echo "cheat"$xctr"_desc = \"${hdng[$ctr]}\"" >&$FD_W
        # write cheat heading to temp file
        echo "cheat"$xctr"_code = \"$xcde\"" >&$FD_W
        # write single line cheat code to temp file
        echo -e "cheat"$xctr"_enable = false\n" >&$FD_W
        # write code enable status to temp file
        ((xctr++))
      fi
      # output if consecutive code names not duplicate, increment counter
      ((ctr++))
    done
    cat <&$FD_R | perl -pe "s|(^cheats =) \d+$|\1 $xctr|gi" > "$file"
    # correct total number of codes
    echo -e "  Complete, output file is:   \n  $file\n"
  fi
else
  echo -e "\n ** md.emu '.pat' or RetroArch '.cht' file required. **\n ** Script will convert back and forth. **\n"
fi
