#!/bin/bash

# reformat gameshark retroarch or melonDS
# doesn't work for xploder codes
if [[ -n "${@:1}" && -f "${@:1}" ]]; then
  tmpfile=$(mktemp)
  exec {FD_W}>"$tmpfile"
  exec {FD_R}<"$tmpfile"
  rm "$tmpfile"
  # create temp file
  file="$(echo "$(realpath "${@:1}")" | perl -pe 's/((|_mch|_retro)\.(cht|mch))//gi')"
  # strip _melon.cht, _retro.cht, and .cht extension to get root filename
  if [[ -n "$(pcre2grep -Mio 'cheat\d+_desc.*(?s)\s+(?-s)cheat\d+_code.+?[[:xdigit:]?X]{8}.[[:xdigit:]?X]{8}' "${@:1}")" ]] ; then
  # when file contains cheat desc and hex (8 8) format codes convert to melonDS
    file=""$file"_melon.mch"
    echo -e "\n ** RetroArch '.cht' file detected, converting to melonDS format. **\n    Processing ... \n"
    # append _melon to root filename for output
    if [[ -n "$(pcre2grep -Mio '(cheat(\d+)_)desc(?=.*\n(?!cheat\2_code))' "${@:1}")" ]]; then
      echo  ' ** Cheat names found without matching codes **'
      read -r -p '    treat as categories and merge together? [y/N] ' chse
      echo
      if [[ "$chse" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
        chse=1
      else
        unset chse
      fi
    fi
    if [[ -z "$chse" ]]; then
      readarray -t hdng < <(pcre2grep -Mio 'cheat(\d+)_desc.*\ncheat\1_code.*' "${@:1}" | pcre2grep -io '(?<=_desc = )\".*\"' | perl -pe 's|'\''||g ; s#(?<=\")[\t ]+|[\t ]+(?=\")##g ; s|^\"\"$| |g ; s|\"||g')
    else
      readarray -t hdng < <(perl -0777 -pe 's|(cheat(\d+)_)desc(?=.*\n(?!cheat\2_code))|\1cat|gi' "${@:1}" | perl -ne '$cat = $1 if s/^cheat\d+_cat = \"(.*)\".*\n// ; print if s/^cheat\d+_desc = \"(.*\")/"$cat, $1/' | perl -pe 's|'\''||g ; s#(?<=\")[\t ]+|[\t ]+(?=\")##g ; s|^\"\"$| |g ; s|\"||g')
    fi
    # capture heading names, strip leading/trailing spaces,
    # replace empty name with space, strip quotes
    readarray -t code < <(pcre2grep -Mio 'cheat(\d+)_desc.*\ncheat\1_code.*' "${@:1}" | pcre2grep -io '(?<=_code = )\".*\"' | perl -pe 's#(?<=\")[\t ]+|[\t ]+(?=\")##g ; s|^\"\"$| |g ; s|\"||g ; s|^((?![[:xdigit:]?X]{8}.[[:xdigit:]?X]{8}).)*$| |gi ; s|([\w]{8})[ :+]([\w?]{8}[\+\n])|\1 \2|g ; s|O|0|g')
    # capture code lines, strip leading/trailing spaces, replace empty code
    # with space, replace invalid code with space, strip quotes, replace
    # delimiter in center of (8 8) format with space, replace 'O' with '0'
    ctr=0
    until [ $ctr = ${#hdng[@]} ] ; do
    # loop for the total number of headers
      if [[ "${code[$ctr]}" != ' ' ]]; then
      # only write headers with non-blank codes
        echo "CODE 0 ${hdng[$ctr]}" >&$FD_W
        # write bracketed header to temp file
        echo -e "$(echo "${code[$ctr]}" | tr '+' '\n')" >&$FD_W
        # write codes, reformatted to multiline, to temp file
      fi
      ((ctr++))
    done
    # write temp file to disk
    cat >&"$file"< <(echo "CAT Cheats" ; cat <&$FD_R)
    echo -e "  Complete, output file is:   \n  $file\n"
  elif [[ -n "$(pcre2grep -Mio 'CODE \d.+?(?=\n)(?s)\s+(?-s)[[:xdigit:]?X]{8}.[[:xdigit:]?X]{4,8}' "${@:1}")" ]] ; then
  # when file contains bracketed headers and hex (8 8) format codes convert to retroarch
    file=""$file"_retro.cht"
    # append _retro to root filename for output
    echo -e "\n ** melonDS '.cht' file detected, converting to RetroArch format. **\n    Processing ... \n"
    read -r -p 'Merge Category with Code Names? [y/N] ' chse
    if [[ "$chse" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
      readarray -t hdng < <(perl -pe '$cat = $1 if s/^CAT ([^\v]+).*\n// ; s/(^CODE \d )/$1$cat, /' "${@:1}" | pcre2grep -io '(^CODE \d[^\r\n]+|[[:xdigit:]?X]{8}.[[:xdigit:]?X]{8})' | perl -0777 -pe 's|CODE \d .+?(?=\nCODE)||gi ; s/(?<=CODE \d )[*\t ]+|[\t ]+(?=\n)//gi ; s|(?<=CODE \d )(?=\n)| |gi' | pcre2grep -io '(?<=^CODE \d ).*(?=$)')
    else
      readarray -t hdng < <(pcre2grep -io '(^CODE \d[^\r\n]+|[[:xdigit:]?X]{8}.[[:xdigit:]?X]{8})' "${@:1}" | perl -0777 -pe 's|CODE \d .+?(?=\nCODE)||gi ; s/(?<=CODE \d )[*\t ]+|[\t ]+(?=\n)//gi ; s|(?<=CODE \d )(?=\n)| |gi' | pcre2grep -io '(?<=^CODE \d ).*(?=$)')
    fi
    # capture only codes/headings then remove hashed
    # lines without subtending codes, remove leading spaces
    # (and asterisk), plus trailing spaces within hashed lines,
    # stuff empty brackets with space, capture all non blank lines
    readarray -t code < <(pcre2grep -io '(^CODE \d[^\r\n]+|[[:xdigit:]?X]{8}.[[:xdigit:]?X]{8})' "${@:1}" | perl -0777 -pe 's|CODE \d .+?(?=\n)||gi ; s|O|0|gi ; s/(\w.+?)\n(?!\n|\Z)/\1+/gi' | pcre2grep -io '\w.*')
    # capture only codes/headings then replace bracketed lines
    # with blank, replace 'O' with '0', concatenate consecutive
    # codes separated by plus sign, capture all non blank lines
    ctr=0
    until [ $ctr = ${#hdng[@]} ] ; do
      echo "cheat"$ctr"_desc = \"${hdng[$ctr]}\"" >&$FD_W
      # write cheat heading to temp file
      echo "cheat"$ctr"_code = \"${code[$ctr]}\"" >&$FD_W
      # write single line cheat code to temp file
      echo -e "cheat"$ctr"_enable = false\n" >&$FD_W
      # write code enable status to temp file
      ((ctr++))
    done
    cat >&"$file"< <(echo -e "cheats = ${#hdng[@]}\n" ; cat <&$FD_R)
    # write heading, after count, to beginning of file
    echo -e "  Complete, output file is:   \n  $file\n"
  fi
else
  echo -e "\n ** melonDS or RetroArch '.cht' file required. **\n ** Script will convert back and forth. **\n"
fi
