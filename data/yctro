#!/bin/bash

# reformat ar/gameshark retroarch or Kronos
# input file to opposite
if [[ -n "${@:1}" && -f "${@:1}" ]]; then
  tmpfile=$(mktemp)
  exec {FD_W}>"$tmpfile"
  exec {FD_R}<"$tmpfile"
  rm "$tmpfile"
  # create temp file
  file="$(echo "$(realpath "${@:1}")" | perl -pe 's/((|_yct|_retro)\.(cht|yct))//gi')"
  # strip _yct.yct, _retro.cht, and .cht extension to get root filename
  if [[ -n "$(pcre2grep -Mio 'cheat\d+_desc.*(?s)\s+(?-s)cheat\d+_code.+?[[:xdigit:]?X]{8}.[[:xdigit:]?X]{4}' "${@:1}")" ]] ; then
  # when file contains cheat desc and hex (8 4) format codes convert to yct
    file=""$file"_yct.yct"
    echo -e "\n ** RetroArch '.cht' file detected, converting to Kronos format. **\n    Processing ... \n"
    # append _yct to root filename for output
    xnum="$(printf '%02x' $(pcre2grep -o '(?<=_code = )\".*\"' "${@:1}" | perl -pe 's|([[:xdigit:]?X]{8})([[:xdigit:]?X]{4}[\+\"])|\1 \2|g ; s|^((?![d13][[:xdigit:]?X]{7}.[[:xdigit:]?X]{4}).)*$| |gi' | pcre2grep -io '[[:xdigit:]?X]{8}.[[:xdigit:]?X]{4}' | wc -l))"
    # total number of (8 4) codes after non-(D,1,3)
    # (single or multi) are removed
    readarray -t hdng < <(pcre2grep -o '(?<=_desc = )\".*\"' "${@:1}" | perl -pe 's|'\''||g ; s#(?<=\")[\t ]+|[\t ]+(?=\")##g ; s|^\"\"$| |g ; s|\"||g')
    # capture heading names, strip leading/trailing spaces
    # replace empty name with space, strip quotes
    readarray -t code < <(pcre2grep -o '(?<=_code = )\".*\"' "${@:1}" | perl -pe 's#(?<=\")[\t ]+|[\t ]+(?=\")##g ; s|^\"\"$| |g ; s|\"||g ; s|([[:xdigit:]?X]{8})([[:xdigit:]?X]{4}[\+\n])|\1 \2|g ; s|^((?![d13][[:xdigit:]?X]{7}.[[:xdigit:]?X]{4}).)*$| |gi ; s|d([\w?]{7})[ :+]([\w?]{4}[\+\n])|000000010${1}0000\2|gi ; s|3([\w?]{7})[ :+]([\w?]{4}[\+\n])|000000020${1}0000\2|g ; s|1([\w]{7})[ :+]([\w?]{4}[\+\n])|000000030${1}0000\2|g ; s|O|0|g')
    # capture code lines, strip leading/trailing spaces,
    # replace empty code with space, strip quotes,
    # split 12 char code with space after 8, replace
    # invalid code with space, reformat type (D,3,1)
    # codes, replace capital O with zero
    ctr=0
    until [ $ctr = ${#hdng[@]} ] ; do
    # loop for the total number of headers
      if [[ "${code[$ctr]}" != ' ' ]]; then
        cnam="${hdng[$ctr]}"
        cnam="${cnam::255}"
        # strip code name to 255 chars
        chex="$(echo -n "${code[$ctr]}" | perl -pe 's/([[:xdigit:]]{2})/\\x\1/g')"
        chdg="$(printf '%s' "\x"$(printf '%02x' "$(($(printf '%s' "$cnam" | wc -m)+1))")"")"
        printf '%b' "$(printf '%s' "$chex$chdg$cnam÷÷÷÷÷" | perl -pe "s'\+'$chdg$cnam÷÷÷÷÷'g")" | perl -pe 's|÷|\x00|gi' >&$FD_W
        # 00 00 00, code type (01,02,03) derived
        # from 1st char (D,3,1) of code,
        # 1st 4 bytes of code with 1st hex zeroed,
        # 00 00, last 2 bytes of code = 12 bytes
        # count of code name + 1, code name 00,
        # 00 00 00, 0? (0/1 enable satus) <= 261 bytes
        # limits code name to 255
      fi
      ((ctr++))
    done
    # write temp file to disk
    cat >&"$file"< <(printf '%b' "YCHT\x00\x00\x00\x$xnum" ; cat <&$FD_R)
    # write heading, after count, to beginning of file
    # heading is YCHT 00 00 00, hex num codes = 8 bytes
    # this limits #codes to 255
    echo -e "  Complete, output file is:   \n  $file\n"
  elif [[ -n "$(cat "${@:1}"| xxd -g 0 | perl -pe 's|.{44}||g ; s|\n||g' | grep -Pio '^ycht.*\.{5}$')" ]] ; then
  # when file starts with YCHT and ends in 5 (dots), convert to retroarch
    file=""$file"_retro.cht"
    # append _retro to root filename for output
    echo -e "\n ** Kronos '.yct' file detected, converting to RetroArch format. **\n    Processing ... \n"
    readarray -t hdng < <(perl -0777 -pe 'use utf8 ; s|[^[:print:]]|÷|g ; s|^.{8}||g ; s|.{13}([^÷]+)÷{5}|\1\n|g ; s|[÷]+||g' "${@:1}" | perl -pe 's#^[\t ]+|[\t ]+$##g ; s|^$| |g')
    # headings are non-replacement chars that lie after 8
    # and between 13 chars and 5 replacements, strip
    # leading/trailing spaces, replace empty name with space
    readarray -t code < <(cat "${@:1}" | xxd -g 0 -u | grep -Pio '(?<=: )[[:xdigit:]]+' | tr -d '\n' | grep -Pio '(01|02|03)[[:xdigit:]]{8}0000[[:xdigit:]]{4}' | perl -pe 's|^010([[:xdigit:]]{7})0000([[:xdigit:]]{4})|D\1 \2|g ; s|^020([[:xdigit:]]{7})0000([[:xdigit:]]{4})|3\1 \2|g ; s|^030([[:xdigit:]]{7})0000([[:xdigit:]]{4})|1\1 \2|g')
    # hex starting with (01,02,03) + 8, 0000 + 4 are codes
    # drop all but (8 4) replacing 1st char with (D,3,1)
    ctr=0
    xctr=0
    until [ $ctr = ${#hdng[@]} ] ; do
      if [[ -z "$xflg" ]] ; then
        xcde="${code[$ctr]}"
      else
        xcde="$xcde+${code[$ctr]}"
      fi
      # concatenate codes with consecutive, duplicate, code names
      if [[ $(($ctr+1)) -gt ${#hdng[@]} ]] ; then
        unset xflg
      elif [[ "${hdng[$ctr]}" != "${hdng[$(($ctr+1))]}" ]] ; then
        unset xflg
      elif [[ $(echo -e "${code[$ctr]}\n${code[$(($ctr+1))]}" | pcre2grep -i '[[:xdigit:]?X]{3}-[[:xdigit:]?X]{3}-[[:xdigit:]?X]{3}' | wc -l) -eq 2 || $(echo -e "${code[$ctr]}\n${code[$(($ctr+1))]}" | pcre2grep -i '[[:xdigit:]?X]{8}' | wc -l) -eq 2 ]] ; then
      # verify consecutive code names have codes that are of the same type
      # be aware that codes of same type with same name will be concatenated
      # even when they shouldn't be
        xflg=1
      else
        unset xflg
      fi
      # flag consecutive, duplicate, code names for concatenation
      if [[ -z "$xflg" ]] ; then
        echo "cheat"$xctr"_desc = \"${hdng[$ctr]}\"" >&$FD_W
        # write cheat heading to temp file
        echo "cheat"$xctr"_code = \"$xcde\"" >&$FD_W
        # write single line cheat code to temp file
        echo -e "cheat"$xctr"_enable = false\n" >&$FD_W
        # write code enable status to temp file
        ((xctr++))
      fi
      # output if consecutive code names not duplicate, increment counter
      ((ctr++))
    done
    cat >&"$file"< <(echo -e "cheats = $xctr\n" ; cat <&$FD_R)
    # write heading, after count, to beginning of file
    echo -e "  Complete, output file is:   \n  $file\n"
  fi
else
  echo -e "\n ** Kronos '.yct' or RetroArch '.cht' file required. **\n ** Script will convert back and forth. **\n"
fi
