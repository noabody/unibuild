diff a/darkplaces/PKGBUILD b/darkplaces/PKGBUILD
--- a/darkplaces/PKGBUILD	1969-12-31 17:00:00.000000000 -0700
+++ b/darkplaces/PKGBUILD	1969-12-31 17:00:00.000000000 -0700
@@ -0,0 +1,51 @@
+# Maintainer: Noa Body <noabody@archlinux.org>
+
+pkgname=darkplaces
+pkgver=r9549.d65ddd94
+pkgrel=3
+pkgdesc='Quake engine that powers Xonotic.'
+arch=(x86_64)
+url=https://github.com/xonotic/"$pkgname".git
+license=(GPL2)
+depends=(alsa-lib hicolor-icon-theme libjpeg-turbo
+         libxpm perl-rename sdl2 xorg-fonts-misc)
+makedepends=(git gendesk icoutils inkscape zlib)
+source=("$pkgname"::git+https://github.com/xonotic/"$pkgname".git
+        "$pkgname".patch
+        "$pkgname".sh)
+provides=("$pkgname")
+replaces=("$pkgname" "$pkgname"-2017 "$pkgname"-git "$pkgname"-mod "$pkgname"-rm-git "$pkgname"-xonotic)
+conflicts=("$pkgname" "$pkgname"-2017 "$pkgname"-git "$pkgname"-mod "$pkgname"-rm-git "$pkgname"-xonotic)
+sha256sums=('SKIP'
+            '54896e2257ca9afff383ab88d333c0cb25e11f8885b12a5eb8d6116ab2c406e3'
+            'db845b99cd0bfd35084fd163bd750ab60b9c354fcc83235d0bb4a6eb7180fba7')
+
+pkgver() {
+  cd "$pkgname"
+  printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
+}
+
+prepare() {
+  gendesk -f -n --name='DarkPlaces-GLX' --comment="GLX ${pkgdesc/.}" --custom='Keywords=game;engine;' --exec='/usr/share/darkplaces/darkglx.sh' --icon=darkplaces --terminal=false --categories='GNOME;GTK;Game' --startupnotify=false --pkgname=darkglx
+  gendesk -f -n --name='DarkPlaces-SDL' --comment="SDL ${pkgdesc/.}" --custom='Keywords=game;engine;' --exec='/usr/share/darkplaces/darksdl.sh' --icon=darkplaces --terminal=false --categories='GNOME;GTK;Game' --startupnotify=false --pkgname=darksdl
+  patch -Np1 -i "$pkgname".patch
+  cd "$pkgname"
+  make clean
+}
+
+build() {
+  test -f "$pkgname.svg" || inkscape "$pkgname/$pkgname"72x72.png --export-plain-svg --export-filename="$pkgname".svg
+  cd "$pkgname"
+  make -j4 release
+}
+
+package() {
+  install -dm 755 "$pkgdir"/usr/{bin,share/{"$pkgname",applications,icons/hicolor/scalable/apps}}
+  install -m 755 "$pkgname/$pkgname"-sdl "$pkgdir"/usr/share/"$pkgname"/
+  install -m 755 "$pkgname/$pkgname"-dedicated "$pkgdir"/usr/share/"$pkgname"/
+  install -m 755 "$pkgname".sh "$pkgdir"/usr/share/"$pkgname"/
+  install -m 644 "$pkgname".desktop "$pkgdir"/usr/share/applications/
+  install -m 644 "$pkgname".svg "$pkgdir"/usr/share/icons/hicolor/scalable/apps/
+  ln -rsf "$pkgdir"/usr/share/"$pkgname/$pkgname"-sdl "$pkgdir"/usr/bin/
+  ln -rsf "$pkgdir"/usr/share/"$pkgname/$pkgname"-dedicated "$pkgdir"/usr/bin/
+}
diff a/darkplaces/darkplaces.sh b/darkplaces/darkplaces.sh
--- a/darkplaces/darkplaces.sh	1969-12-31 17:00:00.000000000 -0700
+++ b/darkplaces/darkplaces.sh	1969-12-31 17:00:00.000000000 -0700
@@ -0,0 +1,61 @@
+#!/bin/bash
+gmdir="$HOME/games/quake"
+gmcfg="$HOME/.darkplaces"
+gmtgt="id1/pak0.pak"
+gmprm=""
+glnch="darkplaces-sdl"
+
+gconf () {
+test -d "$gmcfg" || mkdir -p "$gmcfg"
+echo -e "gamepath= $gmdir\ngamemod= id1\ngameparm= $gmprm" | tee "$gmcfg/basedir"
+}
+
+gstart () {
+echo "$glnch -basedir $gmbdr $gmgnm $gmpar" | xargs -i -r sh -c "{}"
+}
+
+gtest () {
+gmbse="$(grep -Pi '^gamepath=.*' "$gmcfg/basedir" | head -1)"
+gmgme="$(grep -Pi '^gamemod=.*' "$gmcfg/basedir" | head -1)"
+gmgpm="$(grep -Pi '^gameparm=.*' "$gmcfg/basedir" | head -1)"
+gmbdr="${gmbse#gamepath= }"
+gmgnm="${gmgme#gamemod= }"
+gmpar="${gmgpm#gameparm= }"
+}
+
+test -f "$gmcfg/basedir" || gconf
+gtest
+if [ -z "$gmbdr" ]; then
+  gconf
+  gtest
+fi
+if [ -d "$gmbdr" ]; then
+  if [ ! -f "$gmbdr/$gmtgt" ]; then
+    gmchk="$(find -H "$gmbdr" -mindepth 2 -maxdepth 2 -type f -regextype posix-extended -iregex "$gmbdr/$gmtgt" -printf '%p\n' | grep -Pic "$gmbdr/$gmtgt")"
+    if [ $gmchk -eq 1 ]; then
+      echo -e "File system is case sensitive\nFile/folder names must be lowercase\n Rename subdirs of\n  $gmbdr\n    containing\n  $gmtgt?\nRequires perl-rename command" | xmessage -file - -buttons Yes,No -default No -center -timeout 30
+      test $? -eq 101 && find -H "$gmbdr" -depth -exec perl-rename 's|([^/]*\Z)|lc($1)|e' {} +
+    elif [ $gmchk -gt 1 ]; then
+      echo -e "File system is case sensitive\nFile/folder names must be lowercase\n Cannot rename subdirs of\n  $gmbdr\n    containing\n  $gmtgt\n\nBecause more than one exists" | xmessage -file - -buttons Ok:0 -center -timeout 30
+    else
+      echo -e "Config:\n $gmcfg/basedir\n  $gmbse\n found, but not\n  $gmgme\n ($gmbdr/$gmtgt)\n\nRebuild config?" | xmessage -file - -buttons Yes,No -default No -center -timeout 30
+      test $? -eq 101 && gconf
+    fi
+  else
+    if [ ! -d "$gmbdr/$gmgnm" ]; then
+      echo -e "Config:\n $gmcfg/basedir\n  $gmbse\n found, but not\n  $gmgme\n ($gmbdr/$gmgnm)\n\nRebuild config?" | xmessage -file - -buttons Yes,No -default No -center -timeout 30
+      test $? -eq 101 && gconf
+    else
+      if [ -z "$(echo "$gmgnm" | grep -Pio '\w+')" ]; then
+        gmgnm=""
+        gstart
+      else
+        gmgnm="-game $gmgnm"
+        gstart
+      fi
+    fi
+  fi
+else
+  echo -e "Config:\n $gmcfg/basedir\n  $gmbse\n not found\n\nRebuild config?" | xmessage -file - -buttons Yes,No -default No -center -timeout 30
+  test $? -eq 101 && gconf
+fi
diff a/darkplaces/darkplaces.patch b/darkplaces/darkplaces.patch
index e69de29..feb733a 100644
--- a/darkplaces/darkplaces.patch	1969-12-31 17:00:00.000000000 -0700
+++ b/darkplaces/darkplaces.patch	1969-12-31 17:00:00.000000000 -0700
@@ -0,0 +1,95 @@
+diff a/darkplaces/vid_sdl.c b/darkplaces/vid_sdl.c
+index 248baac7..9e13f37c 100644
+--- a/darkplaces/vid_sdl.c
++++ b/darkplaces/vid_sdl.c
+@@ -72,6 +72,10 @@ static qboolean vid_hasfocus = false;
+ static qboolean vid_isfullscreen;
+ static qboolean vid_usingvsync = false;
+ static SDL_Joystick *vid_sdljoystick = NULL;
++#if SDL_MAJOR_VERSION == 2
++static SDL_GameController *vid_sdl2gamecontroller = NULL;
++static cvar_t joy_sdl2_trigger_deadzone = {CVAR_SAVE, "joy_sdl2_trigger_deadzone", "0.5", "deadzone for triggers to be registered as key presses"};
++#endif
+ // GAME_STEELSTORM specific
+ static cvar_t *steelstorm_showing_map = NULL; // detect but do not create the cvar
+ static cvar_t *steelstorm_showing_mousecursor = NULL; // detect but do not create the cvar
+@@ -692,14 +696,31 @@ void VID_BuildJoyState(vid_joystate_t *joystate)
+ 	{
+ 		SDL_Joystick *joy = vid_sdljoystick;
+ 		int j;
+-		int numaxes;
+-		int numbuttons;
+-		numaxes = SDL_JoystickNumAxes(joy);
+-		for (j = 0;j < numaxes;j++)
+-			joystate->axis[j] = SDL_JoystickGetAxis(joy, j) * (1.0f / 32767.0f);
+-		numbuttons = SDL_JoystickNumButtons(joy);
+-		for (j = 0;j < numbuttons;j++)
+-			joystate->button[j] = SDL_JoystickGetButton(joy, j);
++#if SDL_MAJOR_VERSION == 2
++		if (vid_sdl2gamecontroller)
++		{
++			for (j = 0; j <= SDL_CONTROLLER_AXIS_MAX; ++j)
++			{
++				joystate->axis[j] = SDL_GameControllerGetAxis(vid_sdl2gamecontroller, j) * (1.0f / 32767.0f);
++			}
++			for (j = 0; j < SDL_CONTROLLER_BUTTON_MAX; ++j)
++				joystate->button[j] = SDL_GameControllerGetButton(vid_sdl2gamecontroller, j);
++			// emulate joy buttons for trigger "axes"
++			joystate->button[SDL_CONTROLLER_BUTTON_MAX] = VID_JoyState_GetAxis(joystate, SDL_CONTROLLER_AXIS_TRIGGERLEFT, 1, joy_sdl2_trigger_deadzone.value) > 0.0f;
++			joystate->button[SDL_CONTROLLER_BUTTON_MAX+1] = VID_JoyState_GetAxis(joystate, SDL_CONTROLLER_AXIS_TRIGGERRIGHT, 1, joy_sdl2_trigger_deadzone.value) > 0.0f;
++		}
++		else
++#endif
++		{
++			int numaxes;
++			int numbuttons;
++			numaxes = SDL_JoystickNumAxes(joy);
++			for (j = 0;j < numaxes;j++)
++				joystate->axis[j] = SDL_JoystickGetAxis(joy, j) * (1.0f / 32767.0f);
++			numbuttons = SDL_JoystickNumButtons(joy);
++			for (j = 0;j < numbuttons;j++)
++				joystate->button[j] = SDL_JoystickGetButton(joy, j);
++		}
+ 	}
+ 
+ 	VID_Shared_BuildJoyState_Finish(joystate);
+@@ -1309,6 +1330,9 @@ void VID_Init (void)
+ #ifdef DP_MOBILETOUCH
+ 	Cvar_SetValueQuick(&vid_touchscreen, 1);
+ #endif
++#if SDL_MAJOR_VERSION == 2
++	Cvar_RegisterVariable(&joy_sdl2_trigger_deadzone);
++#endif
+ 
+ #ifdef SDL_R_RESTART
+ 	R_RegisterModule("SDL", sdl_start, sdl_shutdown, sdl_newmap, NULL, NULL);
+@@ -1317,7 +1341,7 @@ void VID_Init (void)
+ 	if (SDL_Init(SDL_INIT_VIDEO) < 0)
+ 		Sys_Error ("Failed to init SDL video subsystem: %s", SDL_GetError());
+ 	vid_sdl_initjoysticksystem = SDL_InitSubSystem(SDL_INIT_JOYSTICK) >= 0;
+-	if (vid_sdl_initjoysticksystem)
++	if (!vid_sdl_initjoysticksystem)
+ 		Con_Printf("Failed to init SDL joystick subsystem: %s\n", SDL_GetError());
+ 	vid_isfullscreen = false;
+ }
+@@ -1349,6 +1373,8 @@ void VID_EnableJoystick(qboolean enable)
+ 		// close SDL joystick if active
+ 		if (vid_sdljoystick)
+ 			SDL_JoystickClose(vid_sdljoystick);
++		if (vid_sdl2gamecontroller)
++			SDL_GameControllerClose(vid_sdl2gamecontroller);
+ 		vid_sdljoystick = NULL;
+ 		if (sdlindex >= 0)
+ 		{
+@@ -1356,6 +1382,11 @@ void VID_EnableJoystick(qboolean enable)
+ 			if (vid_sdljoystick)
+ 			{
+ 				const char *joystickname = SDL_JoystickName(vid_sdljoystick);
++				if (SDL_IsGameController(vid_sdljoystickindex))
++				{
++					vid_sdl2gamecontroller = SDL_GameControllerOpen(vid_sdljoystickindex);
++					Con_Printf("Using SDL2 GameController mappings for Joystick %i\n", index);
++				}
+ 				Con_Printf("Joystick %i opened (SDL_Joystick %i is \"%s\" with %i axes, %i buttons, %i balls)\n", index, sdlindex, joystickname, (int)SDL_JoystickNumAxes(vid_sdljoystick), (int)SDL_JoystickNumButtons(vid_sdljoystick), (int)SDL_JoystickNumBalls(vid_sdljoystick));
+ 			}
+ 			else
