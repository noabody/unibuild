diff a/mupen64plus/PKGBUILD b/mupen64plus/PKGBUILD
--- a/mupen64plus/PKGBUILD	1969-12-31 17:00:00.000000000 -0700
+++ b/mupen64plus/PKGBUILD	1969-12-31 17:00:00.000000000 -0700
@@ -0,0 +1,81 @@
+# Maintainer: Noa Body <noabody@archlinux.org>
+
+pkgname=mupen64plus
+pkgver=20221229.r0.gba9a5248
+pkgrel=1
+pkgdesc="A cross-platform plugin-based N64 emulator."
+arch=(x86_64)
+url=http://www.mupen64plus.org
+license=(GPL2)
+depends=(boost-libs desktop-file-utils freetype2 glew glu
+         hicolor-icon-theme libgl libpng libsamplerate minizip
+         python-pyqt5 python-pysdl2 qt5-base sdl2 speexdsp zlib)
+makedepends=(boost git mesa nasm)
+optdepends=(python-opengl python-opengl-accelerate python-pylzma python-rarfile)
+provides=($pkgname)
+conflicts=(m64py m64py-git $pkgname-extraplugins $pkgname-extraplugins-git $pkgname-git $pkgname-rsp-cxd4-git $pkgname-video-gliden64 $pkgname-video-gliden64-git)
+replaces=(m64py m64py-git $pkgname-extraplugins $pkgname-extraplugins-git $pkgname-git $pkgname-rsp-cxd4-git $pkgname-video-gliden64 $pkgname-video-gliden64-git)
+source=(
+  git+https://github.com/"$pkgname/$pkgname"-core.git
+  git+https://github.com/"$pkgname/$pkgname"-video-glide64mk2.git
+  git+https://github.com/"$pkgname/$pkgname"-video-z64.git
+  git+https://github.com/"$pkgname/$pkgname"-rsp-hle.git
+  git+https://github.com/"$pkgname/$pkgname"-rsp-cxd4.git
+  git+https://github.com/"$pkgname/$pkgname"-ui-console.git
+  git+https://github.com/"$pkgname/$pkgname"-video-glide64.git
+  git+https://github.com/"$pkgname/$pkgname"-input-sdl.git
+  git+https://github.com/"$pkgname/$pkgname"-ui-python.git
+  git+https://github.com/"$pkgname/$pkgname"-video-rice.git
+  git+https://github.com/"$pkgname/$pkgname"-audio-sdl.git
+  git+https://github.com/"$pkgname/$pkgname"-video-arachnoid.git
+  git+https://github.com/"$pkgname/$pkgname"-rsp-z64.git
+  mupen64.patch
+)
+sha256sums=('SKIP'
+            'SKIP'
+            'SKIP'
+            'SKIP'
+            'SKIP'
+            'SKIP'
+            'SKIP'
+            'SKIP'
+            'SKIP'
+            'SKIP'
+            'SKIP'
+            'SKIP'
+            'SKIP'
+            '3ba9a1b94c1e35a73dbfb798b70331838092a6724089769ac1afe67e3a740aa7')
+
+_subs='audio-sdl core input-sdl rsp-cxd4 rsp-hle rsp-z64 ui-console video-arachnoid video-glide64 video-glide64mk2 video-rice video-z64'
+
+pkgver() {
+  cd "$pkgname"-core
+#  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
+  printf "%s.r%s.g%s" "$(date +%Y%m%d)" "$(git rev-list "$(git rev-list --tags --no-walk --max-count=1)"..HEAD --count)" "$(git rev-parse --short HEAD)"
+}
+
+prepare() {
+  patch -Np1 -i mupen64.patch
+  for _sub in $_subs; do
+    make -C "$pkgname-$_sub"/projects/unix clean
+  done
+  cd "$pkgname"-ui-python
+  python setup.py clean
+}
+
+build() {
+  for _sub in $_subs; do
+    make -C "$pkgname-$_sub"/projects/unix -j$(nproc) PIE=1 PREFIX=/usr all
+  done
+  cd "$pkgname"-ui-python
+  python setup.py build
+}
+
+package() {
+  for _sub in $_subs; do
+    make -C "$pkgname-$_sub"/projects/unix PREFIX="$pkgdir"/usr install
+  done
+  cd "$pkgname"-ui-python
+  python setup.py install --root="$pkgdir"
+  ln -rsf "$(find "$pkgdir"/usr/lib -type f -iname lib"$pkgname".*)" "$pkgdir"/usr/lib/lib"$pkgname".so
+}
diff a/mupen64plus/mupen64.patch b/mupen64plus/mupen64.patch
index a593ca4..0e73e2e 100644
--- a/mupen64plus/mupen64.patch	1969-12-31 17:00:00.000000000 -0700
+++ b/mupen64plus/mupen64.patch	1969-12-31 17:00:00.000000000 -0700
@@ -0,0 +1,203 @@
+diff a/mupen64plus-ui-python/src/m64py/core/vidext.py b/mupen64plus-ui-python/src/m64py/core/vidext.py
+index a593ca4..0e73e2e 100644
+--- a/mupen64plus-ui-python/src/m64py/core/vidext.py	1969-12-31 17:00:00.000000000 -0700
++++ b/mupen64plus-ui-python/src/m64py/core/vidext.py	1969-12-31 17:00:00.000000000 -0700
+@@ -24,6 +24,7 @@ except:
+     glimport = False
+ 
+ from PyQt5.QtOpenGL import QGLFormat
++from PyQt5.QtCore import QCoreApplication
+ 
+ from sdl2 import SDL_WasInit, SDL_InitSubSystem, SDL_QuitSubSystem, SDL_INIT_VIDEO
+ from sdl2 import SDL_GetNumDisplayModes, SDL_DisplayMode, SDL_GetDisplayMode
+@@ -176,6 +177,7 @@ class Video():
+         """Swaps the front/back buffers after
+         rendering an output video frame. """
+         self.widget.swapBuffers()
++        QCoreApplication.processEvents()
+         return M64ERR_SUCCESS
+ 
+     def resize_window(self, width, height):
+diff a/mupen64plus-ui-python/src/m64py/frontend/mainwindow.py b/mupen64plus-ui-python/src/m64py/frontend/mainwindow.py
+index f845bbc..9f3a9f7 100644
+--- a/mupen64plus-ui-python/src/m64py/frontend/mainwindow.py	1969-12-31 17:00:00.000000000 -0700
++++ b/mupen64plus-ui-python/src/m64py/frontend/mainwindow.py	1969-12-31 17:00:00.000000000 -0700
+@@ -131,14 +131,18 @@ class MainWindow(QMainWindow, Ui_MainWindow):
+                         bool(self.settings.get_int_safe("keep_aspect", 1)):
+                     width, height = self.keep_aspect(size)
+ 
++            ratio = self.devicePixelRatio()
++            real_width = int(width * ratio)
++            real_height = int(height * ratio)
++
+             self.worker.core.config.open_section("Video-General")
+-            self.worker.core.config.set_parameter("ScreenWidth", width)
+-            self.worker.core.config.set_parameter("ScreenHeight", height)
++            self.worker.core.config.set_parameter("ScreenWidth", real_width)
++            self.worker.core.config.set_parameter("ScreenHeight", real_height)
+ 
+             if not fullscreen:
+-                video_size = (width << 16) + height
++                video_size = (real_width << 16) + real_height
+             else:
+-                video_size = (width << 16) + (height + self.widgets_height)
++                video_size = (real_width << 16) + (real_height + self.widgets_height)
+             if self.worker.state in (M64EMU_RUNNING, M64EMU_PAUSED):
+                 self.worker.core_state_set(M64CORE_VIDEO_SIZE, video_size)
+ 
+@@ -233,15 +237,20 @@ class MainWindow(QMainWindow, Ui_MainWindow):
+ 
+     def on_file_open(self, filepath=None, filename=None):
+         """Opens ROM file."""
++        if self.worker.is_stopping:
++            return
+         if not filepath:
+             action = self.sender()
+             filepath = action.data()
+         self.worker.core_state_query(M64CORE_EMU_STATE)
++        def after():
++            self.worker.set_filepath(filepath, filename)
++            self.worker.start()
++            self.raise_()
+         if self.worker.state in [M64EMU_RUNNING, M64EMU_PAUSED]:
+-            self.worker.stop()
+-        self.worker.set_filepath(filepath, filename)
+-        self.worker.start()
+-        self.raise_()
++            self.worker.stop(and_then=after)
++        else:
++            after()
+ 
+     def update_status(self, status):
+         """Updates label in status bar."""
+diff a/mupen64plus-ui-python/src/m64py/frontend/settings.py b/mupen64plus-ui-python/src/m64py/frontend/settings.py
+index 7f1e3c8..36d2d54 100644
+--- a/mupen64plus-ui-python/src/m64py/frontend/settings.py	1969-12-31 17:00:00.000000000 -0700
++++ b/mupen64plus-ui-python/src/m64py/frontend/settings.py	1969-12-31 17:00:00.000000000 -0700
+@@ -103,8 +103,7 @@ class Settings(QDialog, Ui_Settings):
+         self.parent.vidext = state
+         self.comboResolution.setEnabled(not self.parent.vidext)
+         self.checkFullscreen.setEnabled(not self.parent.vidext)
+-        self.parent.worker.quit()
+-        self.parent.worker.init()
++        self.parent.worker.quit(and_then=self.parent.worker.init)
+ 
+     def connect_signals(self):
+         self.browseLibrary.clicked.connect(lambda: self.browse_dialog(
+@@ -307,8 +306,9 @@ class Settings(QDialog, Ui_Settings):
+             self.set_section(combo, button, settings)
+ 
+     def set_resolution(self):
+-        width = self.core.config.get_parameter("ScreenWidth")
+-        height = self.core.config.get_parameter("ScreenHeight")
++        ratio = self.parent.devicePixelRatio()
++        width = int(self.core.config.get_parameter("ScreenWidth") / ratio)
++        height = int(self.core.config.get_parameter("ScreenHeight") / ratio)
+         if (width, height) not in MODES:
+             MODES.append((width, height))
+ 
+@@ -336,8 +336,9 @@ class Settings(QDialog, Ui_Settings):
+             width, height = self.get_size_safe()
+         else:
+             width, height = self.comboResolution.currentText().split("x")
+-        self.core.config.set_parameter("ScreenWidth", int(width))
+-        self.core.config.set_parameter("ScreenHeight", int(height))
++        ratio = self.parent.devicePixelRatio()
++        self.core.config.set_parameter("ScreenWidth", int(int(width) * ratio))
++        self.core.config.set_parameter("ScreenHeight", int(int(height) * ratio))
+         self.core.config.set_parameter("Fullscreen", self.checkFullscreen.isChecked())
+         self.core.config.set_parameter("VerticalSync", self.checkVsync.isChecked())
+         self.qset.setValue("keep_aspect", int(self.checkKeepAspect.isChecked()))
+diff a/mupen64plus-ui-python/src/m64py/frontend/worker.py b/mupen64plus-ui-python/src/m64py/frontend/worker.py
+index 29cfb0a..0674316 100644
+--- a/mupen64plus-ui-python/src/m64py/frontend/worker.py	1969-12-31 17:00:00.000000000 -0700
++++ b/mupen64plus-ui-python/src/m64py/frontend/worker.py	1969-12-31 17:00:00.000000000 -0700
+@@ -17,7 +17,7 @@
+ import os
+ import shutil
+ 
+-from PyQt5.QtCore import QThread, QTimer
++from PyQt5.QtCore import QObject, QTimer
+ from sdl2 import SDL_EnableScreenSaver, SDL_DisableScreenSaver
+ 
+ from m64py.utils import sl
+@@ -30,12 +30,12 @@ from m64py.archive import Archive
+ from m64py.platform import DLL_EXT, DEFAULT_DYNLIB, SEARCH_DIRS
+ 
+ 
+-class Worker(QThread):
+-    """Mupen64Plus thread worker"""
++class Worker(QObject):
++    """Mupen64Plus worker"""
+ 
+     def __init__(self, parent=None):
+         """Constructor."""
+-        QThread.__init__(self, parent)
++        QObject.__init__(self, parent)
+         self.parent = parent
+         self.video = video
+         self.plugin_files = []
+@@ -46,6 +46,7 @@ class Worker(QThread):
+         self.state = M64EMU_STOPPED
+         self.settings = self.parent.settings
+         self.core = Core()
++        self.is_stopping = False
+ 
+     def init(self, path=None):
+         """Initialize."""
+@@ -62,14 +63,19 @@ class Worker(QThread):
+             self.parent.state_changed.emit((False, False, False, False))
+             self.parent.info_dialog.emit(self.tr("Mupen64Plus library not found."))
+ 
+-    def quit(self):
++    def quit(self, and_then=None):
++        def after():
++            if self.core.get_handle():
++                self.plugins_shutdown()
++                self.plugins_unload()
++                self.core_shutdown()
++                self.core_unload()
++            if and_then is not None:
++                and_then()
+         if self.state in [M64EMU_RUNNING, M64EMU_PAUSED]:
+             self.stop()
+-        if self.core.get_handle():
+-            self.plugins_shutdown()
+-            self.plugins_unload()
+-            self.core_shutdown()
+-            self.core_unload()
++        else:
++            after()
+ 
+     def set_filepath(self, filepath, filename=None):
+         """Sets rom file path."""
+@@ -343,13 +349,16 @@ class Worker(QThread):
+             (load, pause, action, cheats) = True, True, True, cheat
+         self.parent.state_changed.emit((load, pause, action, cheats))
+ 
+-    def stop(self):
++    def stop(self, and_then=None):
+         """Stops thread."""
+         self.core.stop()
+-        self.wait()
++        self.is_stopping = True
++        self.after_stop = and_then
++
++    def start(self):
++        QTimer.singleShot(0, self.run)
+ 
+     def run(self):
+-        """Starts thread."""
+         self.rom_open()
+         self.core.attach_plugins(
+             self.get_plugins())
+@@ -361,3 +370,9 @@ class Worker(QThread):
+         self.core.detach_plugins()
+         self.rom_close()
+         self.toggle_actions()
++        if self.is_stopping:
++            after_stop = self.after_stop
++            del self.after_stop
++            if after_stop is not None:
++                after_stop()
++            self.is_stopping = False
