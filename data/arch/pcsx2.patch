diff a/pcsx2/PKGBUILD b/pcsx2/PKGBUILD
--- a/pcsx2/PKGBUILD	1969-12-31 17:00:00.000000000 -0700
+++ b/pcsx2/PKGBUILD	1969-12-31 17:00:00.000000000 -0700
@@ -0,0 +1,67 @@
+# Maintainer: Noa Body <noabody@archlinux.org>
+
+pkgname=pcsx2
+pkgver=1.7.3780.r0.g18bdf4a8d
+pkgrel=1
+epoch=1
+pkgdesc='A Sony PlayStation 2 emulator'
+arch=(x86_64)
+url=https://www.pcsx2.net
+license=(GPL2 GPL3 LGPL2.1 LGPL3)
+depends=(libaio libjpeg-turbo libpcap libpulse libsamplerate
+         libzip portaudio qt6-base qt6-svg qt6-tools
+         qt6-wayland rapidyaml sdl2 soundtouch wayland zstd)
+makedepends=(cmake git ninja python swig xorgproto vulkan-headers)
+provides=(pcsx2-qt)
+source=(git+https://github.com/PCSX2/pcsx2.git
+        https://github.com/PCSX2/pcsx2_patches/releases/download/latest/cheats_ni.zip
+        https://github.com/PCSX2/pcsx2_patches/releases/download/latest/cheats_ws.zip
+        "$pkgname".patch)
+noextract=(cheats_ni.zip cheats_ws.zip)
+sha256sums=(SKIP
+            SKIP
+            SKIP
+            'ed00c7c1b42d2e85c8d3c41a66d8a74341cd8eddf62c328d30cb6346f5557c17')
+
+pkgver() {
+  cd "$pkgname"
+  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
+}
+
+prepare() {
+  gendesk -f -n --name='PCSX2' --comment="${pkgdesc/.}" --custom='Keywords=game;engine;' --exec="env GDK_BACKEND=x11 MESA_NO_ERROR=1 $pkgname-qt" --icon="$pkgname" --terminal=false --categories='GNOME;GTK;Game' --startupnotify=false --pkgname="$pkgname"
+  test -f "$pkgname.svg" || inkscape "$pkgname"/bin/resources/icons/AppIconLarge.png --export-plain-svg --export-filename="$pkgname".svg
+  patch -Np1 -i "$pkgname".patch
+  test ! -d build || rm -rf build
+  cd "$pkgname"
+  git submodule update --init --recursive
+  cp -prf bin/resources/* pcsx2-qt/resources/
+}
+
+build() {
+  export CMAKE_C_COMPILER=/usr/bin/clang
+  export CMAKE_CXX_COMPILER=/usr/bin/clang++
+  export CMAKE_MODULE_LINKER_FLAGS_INIT="-fuse-ld=lld"
+  export CMAKE_SHARED_LINKER_FLAGS_INIT="-fuse-ld=lld"
+  cmake -S "$pkgname" -B build -G Ninja \
+    -DCMAKE_BUILD_TYPE=Release \
+    -DCMAKE_INSTALL_PREFIX=/usr \
+    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \
+    -DWAYLAND_API=ON \
+    -DQT_BUILD=ON \
+    -DXDG_STD=TRUE \
+    -DUSE_VULKAN=ON \
+    -DDISABLE_ADVANCE_SIMD=ON \
+    -DPACKAGE_MODE=ON \
+    -DDISABLE_SETCAP=ON \
+    -DCMAKE_SKIP_RPATH=ON \
+    -Wno-dev
+  ninja -C build -j$(nproc)
+}
+
+package() {
+  DESTDIR="$pkgdir" cmake --install build
+  install -Dm 644 "$pkgname".desktop -t "$pkgdir"/usr/share/applications
+  install -Dm 644 "$pkgname".svg -t "$pkgdir"/usr/share/icons/hicolor/scalable/apps
+  install -m 644 cheats_*.zip "$pkgdir"/usr/share/PCSX2/resources/
+}
diff a/pcsx2/pcsx2.patch b/pcsx2/pcsx2.patch
index e69de29..feb733a 100644
--- a/pcsx2/pcsx2.patch	1969-12-31 17:00:00.000000000 -0700
+++ b/pcsx2/pcsx2.patch	1969-12-31 17:00:00.000000000 -0700
@@ -0,0 +1,60 @@
+diff --git a/pcsx2/make/BuildParameters.cmake b/pcsx2/cmake/BuildParameters.cmake
+index f38e0bea8..2e11ee7f7 100644
+--- a/pcsx2/cmake/BuildParameters.cmake
++++ b/pcsx2/cmake/BuildParameters.cmake
+@@ -54,6 +54,15 @@ if(UNIX AND NOT APPLE)
+ 	option(WAYLAND_API "Enable Wayland support" OFF)
+ endif()
+ 
++if(PACKAGE_MODE)
++	file(RELATIVE_PATH relative_datadir ${CMAKE_INSTALL_FULL_BINDIR} ${CMAKE_INSTALL_FULL_DATADIR}/PCSX2)
++	file(RELATIVE_PATH relative_docdir ${CMAKE_INSTALL_FULL_BINDIR} ${CMAKE_INSTALL_FULL_DOCDIR})
++	# Compile all source codes with those defines
++	list(APPEND PCSX2_DEFS
++		PCSX2_APP_DATADIR="${relative_datadir}"
++		PCSX2_APP_DOCDIR="${relative_docdir}")
++endif()
++
+ if(APPLE)
+ 	option(OSX_USE_DEFAULT_SEARCH_PATH "Don't prioritize system library paths" OFF)
+ 	option(SKIP_POSTPROCESS_BUNDLE "Skip postprocessing bundle for redistributability" OFF)
+diff --git a/pcsx2/pcsx2-qt/CMakeLists.txt b/pcsx2/pcsx2-qt/CMakeLists.txt
+index 7e822cb2a..319d442d5 100644
+--- a/pcsx2/pcsx2-qt/CMakeLists.txt
++++ b/pcsx2/pcsx2-qt/CMakeLists.txt
+@@ -4,9 +4,10 @@ set(CMAKE_AUTOUIC ON)
+ 
+ add_executable(pcsx2-qt)
+ 
+-if (PACKAGE_MODE)
+-	message(FATAL_ERROR "Package mode is not supported for Qt builds.")
+-else()
++if(PACKAGE_MODE)
++	install(TARGETS pcsx2-qt DESTINATION ${CMAKE_INSTALL_BINDIR})
++	install(DIRECTORY resources DESTINATION ${CMAKE_INSTALL_DATADIR}/PCSX2)
++ else()
+ 	install(TARGETS pcsx2-qt DESTINATION ${CMAKE_SOURCE_DIR}/bin)
+ endif()
+ 
+diff --git a/pcsx2/pcsx2/Frontend/CommonHost.cpp b/pcsx2/pcsx2/Frontend/CommonHost.cpp
+index ab992e483..6269b9748 100644
+--- a/pcsx2/pcsx2/Frontend/CommonHost.cpp
++++ b/pcsx2/pcsx2/Frontend/CommonHost.cpp
+@@ -128,12 +128,14 @@ void CommonHost::SetAppRoot()
+ 
+ void CommonHost::SetResourcesDirectory()
+ {
+-#ifndef __APPLE__
++#ifdef __APPLE__
++	// On macOS, this is in the bundle resources directory.
++	EmuFolders::Resources = Path::Canonicalize(Path::Combine(EmuFolders::AppRoot, "../Resources"));
++#elif !defined(PCSX2_APP_DATADIR)
+ 	// On Windows/Linux, these are in the binary directory.
+ 	EmuFolders::Resources = Path::Combine(EmuFolders::AppRoot, "resources");
+ #else
+-	// On macOS, this is in the bundle resources directory.
+-	EmuFolders::Resources = Path::Canonicalize(Path::Combine(EmuFolders::AppRoot, "../Resources"));
++	EmuFolders::Resources = Path::Canonicalize(Path::Combine(EmuFolders::AppRoot, PCSX2_APP_DATADIR "/resources"));
+ #endif
+ }
+ 
