diff a/pcsx2/PKGBUILD b/pcsx2/PKGBUILD
--- a/pcsx2/PKGBUILD	1969-12-31 17:00:00.000000000 -0700
+++ b/pcsx2/PKGBUILD	1969-12-31 17:00:00.000000000 -0700
@@ -0,0 +1,109 @@
+# Maintainer: Noa Body <noabody@archlinux.org>
+
+pkgname=pcsx2
+pkgver=1.7.4669.r0.gf91f257
+pkgrel=1
+epoch=1
+pkgdesc='A Sony PlayStation 2 emulator'
+arch=(x86_64)
+url=https://www.pcsx2.net
+license=(GPL2 GPL3 LGPL2.1 LGPL3)
+depends=(alsa-lib ffmpeg hicolor-icon-theme libaio libglvnd
+         libpcap libpng libxrandr 'qt6-base>=6.7' qt6-svg
+         sdl2 shaderc-non-semantic-debug soundtouch wayland)
+makedepends=(clang cmake git libpulse lld llvm ninja
+             p7zip qt6-tools qt6-wayland)
+provides=(pcsx2-qt)
+source=(git+https://github.com/PCSX2/pcsx2.git
+        git+https://github.com/PCSX2/pcsx2_patches.git
+        git+https://github.com/biojppm/rapidyaml.git
+        git+https://github.com/biojppm/cmake.git
+        git+https://github.com/biojppm/c4core.git
+        git+https://github.com/biojppm/debugbreak.git
+        git+https://github.com/fastfloat/fast_float.git
+        git+https://github.com/fmtlib/fmt.git
+        git+https://github.com/google/googletest.git
+        vulkan-headers::git+https://github.com/KhronosGroup/Vulkan-Headers.git
+        "$pkgname".patch)
+options=(!lto)
+sha256sums=(SKIP
+            SKIP
+            SKIP
+            SKIP
+            SKIP
+            SKIP
+            SKIP
+            SKIP
+            SKIP
+            SKIP
+            '87611c746850b4e6121bc7a2f2e88506620f2cb32bc0535a2c72a36f1cefb5ba')
+
+pkgver() {
+  cd "$pkgname"
+  git describe --long --abbrev=7 --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
+}
+
+prepare() {
+  patch -Np1 -i "$pkgname".patch
+  test ! -d build || rm -rf build
+  test ! -f patches.zip || rm -f patches.zip
+  cd "$pkgname"
+  perl -pi -e "s/(?<=sdl2 )[\d\.]+/$(pacman -Qs sdl2 | grep -Pio '(?<=^local/sdl2 )[\d\.]+')/gi" cmake/SearchForStuff.cmake
+#  git submodule update --init --recursive
+  local submodule
+  _pcsx2_submodules=(
+      fmt::3rdparty/fmt/fmt
+      googletest::3rdparty/gtest
+      rapidyaml::3rdparty/rapidyaml/rapidyaml
+      vulkan-headers::3rdparty/vulkan-headers
+  )
+  for submodule in ${_pcsx2_submodules[@]}; do
+      git submodule init "${submodule#*::}"
+      git submodule set-url "${submodule#*::}" "$srcdir"/"${submodule%::*}"
+      git -c protocol.file.allow=always submodule update "${submodule#*::}"
+  done
+  
+  cd 3rdparty/rapidyaml/rapidyaml
+  for submodule in ext/c4core; do
+      git submodule init ${submodule}
+      git submodule set-url ${submodule} "${srcdir}/${submodule##*/}"
+      git -c protocol.file.allow=always submodule update ${submodule}
+  done
+  
+  cd ext/c4core
+  for submodule in cmake src/c4/ext/{debugbreak,fast_float}; do
+      git submodule init ${submodule}
+      git submodule set-url ${submodule} "${srcdir}/${submodule##*/}"
+      git -c protocol.file.allow=always submodule update ${submodule}
+  done
+}
+
+build() {
+  cmake -S "$pkgname" -B build -G Ninja \
+    -DCMAKE_BUILD_TYPE=Release \
+    -DCMAKE_INSTALL_PREFIX=/usr \
+    -DCMAKE_C_COMPILER=clang \
+    -DCMAKE_CXX_COMPILER=clang++ \
+    -DCMAKE_EXE_LINKER_FLAGS_INIT="-fuse-ld=lld" \
+    -DCMAKE_MODULE_LINKER_FLAGS_INIT="-fuse-ld=lld" \
+    -DCMAKE_SHARED_LINKER_FLAGS_INIT="-fuse-ld=lld" \
+    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \
+    -DCMAKE_SKIP_RPATH=ON \
+    -DDISABLE_ADVANCE_SIMD=ON \
+    -DENABLE_SETCAP=OFF \
+    -DPACKAGE_MODE=ON \
+    -DUSE_VULKAN=ON \
+    -DWAYLAND_API=ON \
+    -DX11_API=ON \
+    -Wno-dev
+  ninja -C build -j$(nproc)
+  cp -f pcsx2/.github/workflows/scripts/linux/pcsx2-qt.desktop build/bin/PCSX2.desktop
+  cd pcsx2_patches
+  7z a -r ../patches.zip patches/.
+}
+
+package() {
+  DESTDIR="$pkgdir" cmake --install build
+  install -Dm644 pcsx2/pcsx2-qt/resources/icons/AppIcon64.png "$pkgdir"/usr/share/icons/hicolor/64x64/apps/PCSX2.png
+  install -m 644 patches.zip "$pkgdir"/usr/share/PCSX2/resources/
+}
diff a/pcsx2/pcsx2.patch b/pcsx2/pcsx2.patch
index e69de29..feb733a 100644
--- a/pcsx2/pcsx2.patch	1969-12-31 17:00:00.000000000 -0700
+++ b/pcsx2/pcsx2.patch	1969-12-31 17:00:00.000000000 -0700
@@ -0,0 +1,89 @@
+diff a/pcsx2/CMakeLists.txt b/pcsx2/CMakeLists.txt
+index b7e20868d..ec9d69654 100644
+--- a/pcsx2/CMakeLists.txt	1969-12-31 17:00:00.000000000 -0700
++++ b/pcsx2/CMakeLists.txt	1969-12-31 17:00:00.000000000 -0700
+@@ -29,12 +29,16 @@ endif()
+ # include some generic functions to ensure correctness of the env
+ include(Pcsx2Utils)
+ 
++set(EXECUTEABLE "pcsx2-qt")
++set(PCSX2_MENU_CATEGORIES "Game;Emulator;")
++
+ check_no_parenthesis_in_path()
+ detect_operating_system()
+ detect_compiler()
+ 
+ #-------------------------------------------------------------------------------
+ # Include specific module
++include(GNUInstallDirs)
+ include(BuildParameters)
+ include(SearchForStuff)
+ 
+@@ -59,6 +63,8 @@ if(ACTUALLY_ENABLE_TESTS)
+ 	add_subdirectory(tests/ctest)
+ endif()
+ 
++INSTALL(DIRECTORY "${CMAKE_BINARY_DIR}/bin/resources" DESTINATION ${CMAKE_INSTALL_FULL_DATADIR}/PCSX2)
++INSTALL(FILES "${CMAKE_BINARY_DIR}/bin/PCSX2.desktop" DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/applications)
+ #-------------------------------------------------------------------------------
+ if(NOT IS_SUPPORTED_COMPILER)
+ 	message(WARNING "
+diff a/pcsx2/cmake/BuildParameters.cmake b/pcsx2/cmake/BuildParameters.cmake
+index 94d3baae1..616e583bb 100644
+--- a/pcsx2/cmake/BuildParameters.cmake	1969-12-31 17:00:00.000000000 -0700
++++ b/pcsx2/cmake/BuildParameters.cmake	1969-12-31 17:00:00.000000000 -0700
+@@ -27,6 +27,15 @@ if(UNIX)
+ 	option(USE_LINKED_FFMPEG "Links with ffmpeg instead of using dynamic loading" OFF)
+ endif()
+ 
++if(PACKAGE_MODE)
++	file(RELATIVE_PATH relative_datadir ${CMAKE_INSTALL_FULL_BINDIR} ${CMAKE_INSTALL_FULL_DATADIR}/PCSX2)
++	file(RELATIVE_PATH relative_docdir ${CMAKE_INSTALL_FULL_BINDIR} ${CMAKE_INSTALL_FULL_DOCDIR})
++	# Compile all source codes with those defines
++	list(APPEND PCSX2_DEFS
++		PCSX2_APP_DATADIR="${relative_datadir}"
++		PCSX2_APP_DOCDIR="${relative_docdir}")
++endif()
++
+ if(APPLE)
+ 	option(OSX_USE_DEFAULT_SEARCH_PATH "Don't prioritize system library paths" OFF)
+ 	option(SKIP_POSTPROCESS_BUNDLE "Skip postprocessing bundle for redistributability" OFF)
+diff a/pcsx2/pcsx2-qt/CMakeLists.txt b/pcsx2/pcsx2-qt/CMakeLists.txt
+index 928718955..91c4b10dd 100644
+--- a/pcsx2/pcsx2-qt/CMakeLists.txt	1969-12-31 17:00:00.000000000 -0700
++++ b/pcsx2/pcsx2-qt/CMakeLists.txt	1969-12-31 17:00:00.000000000 -0700
+@@ -6,6 +6,12 @@ set(CMAKE_AUTOUIC ON)
+ 
+ add_executable(pcsx2-qt)
+ 
++if(PACKAGE_MODE)
++	install(TARGETS pcsx2-qt DESTINATION ${CMAKE_INSTALL_BINDIR})
++ else()
++	install(TARGETS pcsx2-qt DESTINATION ${CMAKE_SOURCE_DIR}/bin)
++endif()
++
+ target_sources(pcsx2-qt PRIVATE
+ 	AboutDialog.cpp
+ 	AboutDialog.h
+diff a/pcsx2/pcsx2/Pcsx2Config.cpp b/pcsx2/pcsx2/Pcsx2Config.cpp
+index 83b357a1f..b9640df56 100644
+--- a/pcsx2/pcsx2/Pcsx2Config.cpp	1969-12-31 17:00:00.000000000 -0700
++++ b/pcsx2/pcsx2/Pcsx2Config.cpp	1969-12-31 17:00:00.000000000 -0700
+@@ -1890,12 +1890,14 @@ void EmuFolders::SetAppRoot()
+ 
+ void EmuFolders::SetResourcesDirectory()
+ {
+-#ifndef __APPLE__
++#ifdef __APPLE__
++	// On macOS, this is in the bundle resources directory.
++	Resources = Path::Canonicalize(Path::Combine(AppRoot, "../Resources"));
++#elif !defined(PCSX2_APP_DATADIR)
+ 	// On Windows/Linux, these are in the binary directory.
+ 	Resources = Path::Combine(AppRoot, "resources");
+ #else
+-	// On macOS, this is in the bundle resources directory.
+-	Resources = Path::Canonicalize(Path::Combine(AppRoot, "../Resources"));
++	Resources = Path::Canonicalize(Path::Combine(AppRoot, PCSX2_APP_DATADIR "/resources"));
+ #endif
+ }
+ 
