#!/bin/bash

# reformat gameshark retroarch or pcsxr input file to opposite
# easier to go to pcsxr, manipulate codes, then return to retroarch
# doesn't work for xploder codes
if [[ -n "${@:1}" && -f "${@:1}" ]]; then
  tmpfile=$(mktemp)
  exec {FD_W}>"$tmpfile"
  exec {FD_R}<"$tmpfile"
  rm "$tmpfile"
  # create temp file
  file="$(echo "$(realpath "${@:1}")" | perl -pe 's/((|_pcsxr|_retro)\.(cht|txt))//gi')"
  # strip _pcsxr.txt, _retro.cht, and .cht extension to get root filename
  if [[ -n "$(pcre2grep -Mio 'cheat\d+_desc.*(?s)\s+(?-s)cheat\d+_code.+?[[:xdigit:]?X]{8}.[[:xdigit:]?X]{4,8}' "${@:1}")" ]] ; then
  # when file contains cheat desc and hex (8 4-8) format codes convert to pcsxr
    file=""$file"_pcsxr.txt"
    echo -e "\n ** RetroArch '.cht' file detected, converting to PCSXR format. **\n    Processing ... \n"
    # append _pcsxr to root filename for output
    readarray -t hdng < <(pcre2grep -io '(?<=_desc = )\".*\"' "${@:1}" | perl -pe 's#(?<=\")[\t ]+|[\t ]+(?=\")##gi ; s|^\"\"\r*$| |gi ; s|\"||gi')
    # capture heading names, strip leading/trailing spaces,
    # replace empty name with space, strip quotes
    readarray -t code < <(pcre2grep -io '(?<=_code = )\".*\"' "${@:1}" | perl -pe 's#(?<=\")[\t ]+|[\t ]+(?=\")##gi ; s|^\"\"\r*$| |gi ; s|^((?![[:xdigit:]?X]{8}.[[:xdigit:]?X]{4,8}).)*$| |gi ; s|\"||gi ; s|(?<=[\w]{8})([ :+])(?=[\w?]{4,8}[\+\v])| |gi ; s|O|0|gi')
    # capture code lines, strip leading/trailing spaces, replace empty code
    # with space, replace invalid code with space, strip quotes, replace
    # delimiter in center of (8 4-8) format with space, replace 'O' with '0'
    ctr=0
    until [ $ctr = ${#hdng[@]} ] ; do
    # loop for the total number of headers
      if [[ "${code[$ctr]}" != ' ' ]]; then
      # only write headers with non-blank codes
        echo "[${hdng[$ctr]}]" >&$FD_W
        # write bracketed header to temp file
        echo -e "$(echo "${code[$ctr]}" | tr '+' '\n')\n" >&$FD_W
        # write codes, reformatted to multiline, to temp file
      fi
      ((ctr++))
    done
    # write temp file to disk
    cat <&$FD_R > "$file"
    echo -e "  Complete, output file is:   \n  $file\n"
  elif [[ -n "$(pcre2grep -Mio '\[.*\].*(?s)\s+(?-s)[[:xdigit:]?X]{8}.[[:xdigit:]?X]{4,8}' "${@:1}")" ]] ; then
  # when file contains bracketed headers and hex (8 4-8) format codes convert to retroarch
    file=""$file"_retro.cht"
    # append _retro to root filename for output
    echo -e "\n ** PCSXR '.txt' file detected, converting to RetroArch format. **\n    Processing ... \n"
    readarray -t hdng < <(pcre2grep -io '(^\[.*\]|[[:xdigit:]?X]{8}.[[:xdigit:]?X]{4,8})' "${@:1}" | perl -0777 -pe 's|\[.+?\](?=\v\[)||gi ; s#(?<=\[)[*\t ]+|[\t ]+(?=\])##gi ; s#(?<=\[)(?=\])# #gi' | pcre2grep -io '(?<=^\[).*(?=\])')
    # capture only codes/headings then remove bracketed
    # lines without subtending codes, remove leading spaces
    # (and asterisk), plus trailing spaces within bracketed lines,
    # stuff empty brackets with space, capture all non blank lines
    readarray -t code < <(pcre2grep -io '(^\[.*\]|[[:xdigit:]?X]{8}.[[:xdigit:]?X]{4,8})' "${@:1}" | perl -0777 -pe 's|\[.+?\]||gi ; s|O|0|gi ; s#(\w.+?)\v(?!\v|\Z)#\1+#gi' | pcre2grep -io '\w.*')
    # capture only codes/headings then replace bracketed lines
    # with blank, replace 'O' with '0', concatenate consecutive
    # codes separated by plus sign, capture all non blank lines
    ctr=0
    echo -e "cheats = ${#hdng[@]}\n" >&$FD_W
    # write cheats number heading to temp file
    until [ $ctr = ${#hdng[@]} ] ; do
      echo "cheat"$ctr"_desc = \"${hdng[$ctr]}\"" >&$FD_W
      # write cheat heading to temp file
      echo "cheat"$ctr"_code = \"${code[$ctr]}\"" >&$FD_W
      # write single line cheat code to temp file
      echo -e "cheat"$ctr"_enable = false\n" >&$FD_W
      # write code enable status to temp file
      ((ctr++))
    done
    cat <&$FD_R > "$file"
    echo -e "  Complete, output file is:   \n  $file\n"
  fi
else
  echo -e "\n ** PCSXR '.txt' or RetroArch '.cht' file required. **\n ** Script will convert back and forth. **\n"
fi
