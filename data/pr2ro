#!/bin/bash

if [ -f "${@:1}" ]; then
  tmpfile=$(mktemp)
  exec {FD_W}>"$tmpfile"
  exec {FD_R}<"$tmpfile"
  rm "$tmpfile"
  # create temp file
  file="$(echo "${@:1}" | perl -pe 's/_(pcsxr|retro).cht|.cht//gi')"
  # strip .cht and _pcsxr/_retro from input filename to get root name
  if [ -n "$(grep -Pi 'cheat\d+_desc' "${@:1}")" ] ; then
  # when file contains cheat_desc, assume retroarch, convert to pcsxr
    file=""$file"_pcsxr.cht"
    # append _pcsxr to root filename for output
    readarray -t hdng < <(grep -Pio '(?<=desc = \").*(?=\")' "${@:1}")
    # read all heading names into array
    readarray -t code < <(grep -Pio '(?<=code = \").*(?=\")' "${@:1}" | perl -pe 's|(?<=[\w]{8})([^\s])(?=[\w?]{4})| |gi ; s|O|0|gi')
    # read formatted codes, stripped to single line hex (8 4) format, into array
    ctr=0
    until [ $ctr = ${#hdng[@]} ] ; do
    # loop for the total number of headers
      echo "[${hdng[$ctr]}]" >&$FD_W
      # write bracketed header to temp file
      echo -e "$(echo "${code[$ctr]}" | tr '+' '\n')\n" >&$FD_W
      # write codes, reformatted to multiline, to temp file
      ((ctr++))
    done
    # write temp file to disk
    cat <&$FD_R > "$file"
  elif [ -n "$(grep -Pi '^(\[.*\]|[[:xdigit:]]{8}.[[:xdigit:]?]{4})' "${@:1}")" ] ; then
  # when file contains bracketed headers or codes, assume pcsxr, convert to retroarch
    file=""$file"_retro.cht"
    # append _retro to root filename for output
    readarray -t hdng < <(grep -Pio '(?<=^\[).*(?=\]$)' "${@:1}")
    readarray -t code < <(perl -0777 -pe 's|[ ]+(?=\n)||gi ; s|\[.+?\]\n||gi ; s|O|0|gi ; s|(\w.+?)\n(?!\n)|\1+|gi ; s|\n+|\n|gi' "${@:1}")
    ctr=0
    echo -e "cheats = ${#hdng[@]}\n" >&$FD_W
    # write cheats number heading to temp file
    until [ $ctr = ${#hdng[@]} ] ; do
      echo "cheat"$ctr"_desc = \"${hdng[$ctr]}\"" >&$FD_W
      # write cheat heading to temp file
      echo "cheat"$ctr"_code = \"${code[$ctr]}\"" >&$FD_W
      # write single line cheat code to temp file
      echo -e "cheat"$ctr"_enable = false\n" >&$FD_W
      # write code enable status to temp file
      ((ctr++))
    done
    cat <&$FD_R > "$file"
  fi
fi
