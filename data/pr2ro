#!/bin/bash

# reformat retroarch or pcsxr format input file to opposite
# much easier to go to pcsxr, manipulate codes, then return to retroarch
if [ -f "${@:1}" ]; then
  tmpfile=$(mktemp)
  exec {FD_W}>"$tmpfile"
  exec {FD_R}<"$tmpfile"
  rm "$tmpfile"
  # create temp file
  file="$(echo "$(realpath "${@:1}")" | perl -pe 's/((|_pcsxr|_retro).cht)//gi')"
  # strip _pcsxr.cht, _retro.cht, and .cht extension to get root filename
  if [ -n "$(pcre2grep -Mio 'cheat\d+_desc(?s).+?cheat\d+_code.+?[[:xdigit:]]{8}.[[:xdigit:]]{4}(?-s)' "${@:1}")" ] ; then
  # when file contains cheat desc and hex (8 4) format codes convert to pcsxr
    file=""$file"_pcsxr.cht"
    # append _pcsxr to root filename for output
    readarray -t hdng < <(grep -Pio '(?<=desc = \").*(?=\")' "${@:1}")
    # read all heading names into array
    readarray -t code < <(grep -Pio '(?<=code = \").*(?=\")' "${@:1}" | perl -pe 's|(?<=[\w]{8})([^\s])(?=[\w?]{4})| |gi ; s|O|0|gi')
    # capture code lines, replace non-space in center of (8 4) format
    # with space, replace capital O with zero in codes
    ctr=0
    until [ $ctr = ${#hdng[@]} ] ; do
    # loop for the total number of headers
      echo "[${hdng[$ctr]}]" >&$FD_W
      # write bracketed header to temp file
      echo -e "$(echo "${code[$ctr]}" | tr '+' '\n')\n" >&$FD_W
      # write codes, reformatted to multiline, to temp file
      ((ctr++))
    done
    # write temp file to disk
    cat <&$FD_R > "$file"
  elif [ -n "$(pcre2grep -Mio '\[.*\](?s).+?[[:xdigit:]]{8}.[[:xdigit:]]{4}(?-s)' "${@:1}")" ] ; then
  # when file contains bracketed headers and hex (8 4) format codes convert to retroarch
    file=""$file"_retro.cht"
    # append _retro to root filename for output
    readarray -t hdng < <(grep -Pio '(?<=^\[).*(?=\])' "${@:1}")
    readarray -t code < <(perl -0777 -pe 's|[ ]+(?=\n)||gi ; s|\n+|\n|gi ; s|\z|\n\n|gi ; s|\[.+?\]|\n|gi ; s|O|0|gi ; s|(\w.+?)\n(?!\n)|\1+|gi' "${@:1}" | grep -Pio '\w.*')
    # trim trailing space, remove blank lines, replace end of file with blank
    # line, replace bracketed lines with blank, replace capital O with zero
    # in codes, concatenate consecutive code lines separated by plus sign
    # capture all non blank lines
    ctr=0
    echo -e "cheats = ${#hdng[@]}\n" >&$FD_W
    # write cheats number heading to temp file
    until [ $ctr = ${#hdng[@]} ] ; do
      echo "cheat"$ctr"_desc = \"${hdng[$ctr]}\"" >&$FD_W
      # write cheat heading to temp file
      echo "cheat"$ctr"_code = \"${code[$ctr]}\"" >&$FD_W
      # write single line cheat code to temp file
      echo -e "cheat"$ctr"_enable = false\n" >&$FD_W
      # write code enable status to temp file
      ((ctr++))
    done
    cat <&$FD_R > "$file"
  fi
fi
